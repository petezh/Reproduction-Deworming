packages <- c("tidyverse",
"knitr",
"kableExtra",
"RJSONIO",
"here") # packages
lapply(packages, library, character.only = TRUE)
json_file <- "results.json" # set to target your
raw_json<- fromJSON(here(json_file))
# author: @petezh
packages <- c("tidyverse",
"knitr",
"kableExtra",
"RJSONIO",
"here") # packages
lapply(packages, library, character.only = TRUE)
json_file <- "improvements/results.json" # set to target your
raw_json<- fromJSON(here(json_file))
typeName <- c( # convert types
"version_control" = "Version Control",
"file_organization" = "File Organization",
"master_script" = "Master Script",
"open_source_software" = "Open Source Software",
"other" = "Other"
)
# author: @petezh
packages <- c("tidyverse",
"knitr",
"kableExtra",
"RJSONIO",
"here") # packages
lapply(packages, library, character.only = TRUE)
json_file <- "improvements/results.json" # set to target your
raw_json<- fromJSON(here(json_file))
typeName <- c( # convert types
"version_control" = "Version Control",
"file_organization" = "File Organization",
"master_script" = "Master Script",
"open_source_software" = "Open Source Software",
"other" = "Other"
)
raw_json$reproduction_package_from_scratch
raw_json
raw_json$reproduction_packages
raw_json$paper
raw_json
length(raw_json$claims)
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Materials\nBelow is a table of the', num_display_imp, 'revised package(s).') # write text
df <- lapply(raw_json$reproduction_packages, function(imp) # loop through improvements
{if(imp['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(imp), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Materials\nBelow is a table of the', num_packages, 'revised package(s).') # write text
df <- lapply(raw_json$reproduction_packages, function(imp) # loop through improvements
{if(imp['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(imp), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Materials\nBelow is a table of the', num_packages, 'revised package(s).') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- typeName[df[,1]]
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
packages <- c("tidyverse",
"knitr",
"kableExtra",
"RJSONIO",
"here") # packages
lapply(packages, library, character.only = TRUE)
raw_json<- fromJSON(here(json_file))
typeName <- c( # convert types
"version_control" = "Version Control",
"file_organization" = "File Organization",
"master_script" = "Master Script",
"open_source_software" = "Open Source Software",
"code" = "Code",
"data" = "Data",
"other" = "Other"
)
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- typeName[df[,1]]
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- typeName[df[,1]]
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
packages <- c("tidyverse",
"knitr",
"kableExtra",
"RJSONIO",
"here") # packages
lapply(packages, library, character.only = TRUE)
raw_json<- fromJSON(here(json_file))
typeName <- c( # convert types
"version_control" = "Version Control",
"file_organization" = "File Organization",
"master_script" = "Master Script",
"open_source_software" = "Open Source Software",
"code" = "Code",
"data" = "Data",
"other" = "Other"
)
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- typeName[df[,1]]
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
``typeName('code')
``typeName['code']
typeName
typeName[coe]
typeName[code]
typeName['code']
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- typeName[df[,1]]
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
raw_json$paper$title
raw_json
raw_json$paper
raw_json$paper[['title']]
raw_json$claims
length(raw_json$claims)
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
print(df[,1])
df[,1] <- typeName[df[,1]]
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
print(df[,1])
print(typeName[df[,1]])
df[,1] <- typeName[df[,1]]
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
typeName
typeName['code']
str_split('version_control', '_')
str_replace('version_control', '_', ' ')
str_to_title(str_replace('version_control', '_', ' '))
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- str_to_title(str_replace(df[,1], '_', ' '))
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- str_to_title(str_replace(df[,1], '_', ' '))
df[,2] <- toString(df[,2])
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- str_to_title(str_replace(df[,1], '_', ' ')) # fix name
df[,3] <- paste0("[", df[,3], "](", df[,3], ")") # convert to markdown
print(df[,3])
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- str_to_title(str_replace(df[,1], '_', ' ')) # fix name
df[,3] <- paste0("[", df[,3], "](", df[,3], ")") # convert to markdown
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
if (num_packages > 0) { # if exists
cat('# Revised Package\nThe revised materials are listed below..') # write text
df <- lapply(raw_json$reproduction_packages, function(pack) # loop through improvements
{if(pack['stage'] == 'revised'){ # only current improvements
data.frame(matrix(unlist(pack), ncol=4, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(1, 2, 4)] # reorder/drop columns
df[,1] <- str_to_title(str_replace(df[,1], '_', ' ')) # fix name
colnames(df) <- c("Type", "Description", "URL") # add column names
knitr::kable(df, align = "cl") # convert to table
}
# author: @petezh
json_file <- "improvements/results.json" # file path to json
ssrp_link <- "https://www.socialsciencereproduction.org/reproductions/4043c95e-0a6a-4acc-b228-4c4abe10b3c4/index" # link to ssrp submission
packages <- c("tidyverse",
"knitr",
"kableExtra",
"RJSONIO",
"here") # packages
lapply(packages, library, character.only = TRUE)
raw_json<- fromJSON(here(json_file))
# author: @petezh
json_file <- "reports/results.json" # file path to json
ssrp_link <- "https://www.socialsciencereproduction.org/reproductions/4043c95e-0a6a-4acc-b228-4c4abe10b3c4/index" # link to ssrp submission
packages <- c("tidyverse",
"knitr",
"kableExtra",
"RJSONIO",
"here") # packages
lapply(packages, library, character.only = TRUE)
raw_json<- fromJSON(here(json_file))
raw_json$robustness_checks
raw_json$robustness_checks[[3]]
raw_json$robustness_checks[[3]]
raw_json$robustness_checks[[3]]$reasonable_robustness_tests
raw_json$robustness_checks[[3]]$reasonable_robustness_tests
raw_json$robustness_checks[[4]]$reasonable_robustness_tests
raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]]
raw_json$robustness_checks[[3]]$reasonable_robustness_tests[[1]]
raw_json$robustness_checks[[1]]$reasonable_robustness_tests[[1]]
raw_json$robustness_checks[[2]]$reasonable_robustness_tests[[1]]
raw_json$robustness_checks[[2]]$reasonable_robustness_tests[[1]]$analytical_choice_identifier
raw_json$robustness_checks[[2]]$reasonable_robustness_tests[[1]]
raw_json$robustness_checks[[2]]$reasonable_robustness_tests
raw_json$robustness_checks[[4]]$reasonable_robustness_tests
raw_json$robustness_checks[[4]]$robustness_mapping_rows
raw_json$robustness_checks[[3]]$robustness_mapping_rows
raw_json$robustness_checks[[3]]$robustness_mapping_rows[['source']]
raw_json$robustness_checks[[4]]$robustness_mapping_rows[['source']]
raw_json$robustness_checks[[4]]$robustness_mapping_rows
typeof(raw_json$robustness_checks[[4]]$robustness_mapping_rows)
typeof(raw_json$robustness_checks[[4]]$robustness_mapping_rows[[1]])
raw_json$robustness_checks[[4]]$robustness_mapping_rows
raw_json$robustness_checks[[4]]$robustness_mapping_rows[[1]]
as.list(raw_json$robustness_checks[[4]]$robustness_mapping_rows[[1]])
raw_json$robustness_checks[[4]]$robustness_mapping_rows
raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]]
as.list(raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]])
as.list(raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]])$results
num_robchecks = sum(sapply(raw_json$robustness_checks, function(x) as.list(x$reasonable_robustness_tests[[1]])$results!='')) # count robuestness checks
print(num_robchecks)
if(num_future_imp > 0) { # if exists
cat('# Robustness Checks\nThere were', num_future_imp, 'suggested future improvement(s).') # write text
df <- lapply(c(raw_json$improvement$improved_display_items, raw_json$improvement$paper_level_improvements), function(imp) # loop through all improvements
{if(imp['phase'] == 'future'){ # only future improvements
data.frame(matrix(unlist(imp), ncol=3, byrow=T))} # turn into data frame
})
df <- do.call(rbind, df) # collect improvements
df <- df[,c(2, 1)] # reorder/drop columns
df[,1] <- str_to_title(str_replace(df[,1], '_', ' '))
colnames(df) <- c("Type", "Description") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_robchecks = sum(sapply(raw_json$robustness_checks, function(x) as.list(x$reasonable_robustness_tests[[1]])$results!='')) # count robuestness checks
print(num_robchecks)
sapply(raw_json$robustness_checks, function(x) as.list(x))
raw_json$robustness_checks
sapply(raw_json$robustness_checks, function(x) as.list(x$reasonable_robustness_tests[1]))
sapply(raw_json$robustness_checks, function(x) as.list(x$reasonable_robustness_tests[[1]]))
data.frame(sapply(raw_json$robustness_checks, function(x) as.list(x$reasonable_robustness_tests[[1]])))
df <- data.frame(sapply(raw_json$robustness_checks, function(x) as.list(x$reasonable_robustness_tests[[1]])))
df$X1
df$X2
df$X3
df$X4
df$X5
df <- data.frame(sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') {as.list(x$reasonable_robustness_tests[[1]])}))
sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') 'hi')
sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]]))
data.frame(sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]])))
sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]]))
data <- sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]]))
data[!is.na(data)]
complete.cases(data)
complete.cases(df)
sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]]))
sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]]))
type(sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]])))
typeof(sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]])))
sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]]))
x <- sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]]))
x[sapply(x, is.null)] <- NULL
x
x <- sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') as.list(x$reasonable_robustness_tests[[1]]))
x[sapply(x, is.null)] <- NULL
x
data.frame(x)
df <- data.frame(x)
x
matrix(x)
matrix(unlist(x))
matrix(unlist(x), ncol = 6)
matrix(unlist(x), ncol = 3)
matrix(unlist(x), ncol = 6, byrow=T)
matrix(unlist(x), ncol = 3, byrow=T)
matrix(unlist(x), ncol = 3)
data.frame(matrix(unlist(x), ncol = 3))
data.frame(matrix(unlist(x), byrow = T))
data.frame(matrix(unlist(x), byrow = T, ncol = 3))
data.frame(matrix(unlist(x), byrow = T, ncol = 6))
data.frame(matrix(unlist(x), byrow = T, ncol = 3))
data.frame(matrix(unlist(x), ncol = 3))
raw_json$robustness_checks[[1]]$reasonable_robustness_tests[[1]]
raw_json$robustness_checks[[1]]$reasonable_robustness_tests[[2]]
raw_json$robustness_checks[[3]]$reasonable_robustness_tests[[1]]
raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]]
matrix(raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]])
matrix(raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]], ncol = 6)
matrix(raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]], ncol = 6, byrow=T)
data.frame(matrix(raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]], ncol = 6, byrow=T))
data.frame(matrix(raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]], ncol = 6, byrow=T))
num_robchecks = sum(sapply(raw_json$robustness_checks, function(x) as.list(x$reasonable_robustness_tests[[1]])$results!='')) # count robuestness checks
print(num_robchecks)
if(num_robchecks > 0) { # if exists
cat('# Robustness Checks\nThere were', num_robchecks, 'robustness checks(s).') # write text
df <- sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') data.frame(matrix(raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]], ncol = 6, byrow=T)))
df <- do.call(rbind, df) # collect improvements
knitr::kable(df, align = "cl") # convert to table
}
raw_json$robustness_checks[[1]]$reasonable_robustness_tests[[1]]
raw_json$robustness_checks[[1]]$reasonable_robustness_tests[[3]
raw_json$robustness_checks[[1]]$reasonable_robustness_tests[[3]]
raw_json$robustness_checks[[4]]$reasonable_robustness_tests[[1]]
num_robchecks = sum(sapply(raw_json$robustness_checks, function(x) as.list(x$reasonable_robustness_tests[[1]])$results!='')) # count robuestness checks
print(num_robchecks)
if(num_robchecks > 0) { # if exists
cat('# Robustness Checks\nThere were', num_robchecks, 'robustness checks(s).') # write text
df <- sapply(raw_json$robustness_checks, function(x) if(as.list(x$reasonable_robustness_tests[[1]])$results!='') data.frame(matrix(x$reasonable_robustness_tests[[1]], ncol = 6, byrow=T)))
df <- do.call(rbind, df) # collect improvements
df <- df[,c(2,3, 5, 6)] # reorder/drop columns
colnames(df) <- c("Variation", "Results", "Impact on Validity", "Explanation") # add column names
knitr::kable(df, align = "cl") # convert to table
}
num_packages = sum(sapply(raw_json$reproduction_packages, function(x)x['stage']=='revised'))
# author: @petezh
# input parameters
json_file <- "reports/results.json" # file path to json
ssrp_link <- "https://www.socialsciencereproduction.org/reproductions/4043c95e-0a6a-4acc-b228-4c4abe10b3c4/index" # link to ssrp submission
packages <- c("tidyverse",
"knitr",
"kableExtra",
"RJSONIO",
"here") # packages
lapply(packages, library, character.only = TRUE)
raw_json<- fromJSON(here(json_file))
